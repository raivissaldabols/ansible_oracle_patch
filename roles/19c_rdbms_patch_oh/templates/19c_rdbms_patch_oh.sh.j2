#!/bin/bash
# {{ ansible_managed }}

export ORACLE_SID={{ oracle_sid }}
export ORACLE_BASE={{ oracle_base }}
export ORACLE_HOME={{ oracle_home }}
export LISTENER={{ listener_name }}
export STAGE_DIR={{ remote_stage }}/{{ cycle }} ## note staging through cycles

# extra variables
export PATH=$ORACLE_HOME/bin:$PATH

echo "## Patching 19c: database : ${ORACLE_SID} on $(hostname)"
date

echo "## OPatch checks"
$ORACLE_HOME/OPatch/opatch version
$ORACLE_HOME/OPatch/opatch lspatches
$ORACLE_HOME/OPatch/opatch lsinv | grep applied

# check if OH busy
# echo " ## exit if Oracle running"
# if [[ $(fuser $ORACLE_HOME/bin/oracle) != '' ]]; then 
# 	echo "$ORACLE_HOME: seems to be up - existing now"; 
# 	exit 1;
# fi

## Rollback
echo ""
echo "## Rollback patches per list if it exists"
{% if db_19c_rdbms_rollback_list %}
{% for item in db_19c_rdbms_rollback_list %}
export patch={{ item.number }}
echo "## rollback patch: ${patch}"
$ORACLE_HOME/OPatch/opatch rollback -id ${patch} -silent
{% endfor %}
{% endif %}

echo ""
echo "## Apply patches per list"
{% for item in db_19c_rdbms_apply_list %}
export patch={{ item.number }}
export patch_pattern={{ item.mos_regexp }}
echo "## apply patch: ${patch}: from: ${STAGE_DIR}/p${patch}*${patch_pattern}*.zip"
cd ${STAGE_DIR}
if [ -d "{{ item.number }}" ]; 
 then
   cd ${STAGE_DIR}/{{ item.number }}
   echo "Patch {{ item.number }} found, applying patch"
   $ORACLE_HOME/OPatch/opatch apply -silent 
 else
   cd ${STAGE_DIR}
   echo "Unzipping patch"
   unzip p${patch}*${patch_pattern}*.zip
   echo "Applying Patch"
   cd {{ item.number }}
   $ORACLE_HOME/OPatch/opatch apply -silent    
fi
# $ORACLE_HOME/OPatch/opatch apply -silent ${STAGE_DIR}/p${patch}*${patch_pattern}*.zip
{% endfor %}

echo "## OPatch checks"
$ORACLE_HOME/OPatch/opatch lsinv | grep applied

echo "## task completed: Patching 19c:  database : ${ORACLE_SID} on $(hostname)"
date